from pydantic import BaseModel

class AccountInfo(BaseModel):
    accountCode: str
    accountId: str
    accountNo: str
    accountType: str
    accountingAccountId: str
    accountingAuthRecordId: str
    accountingModifyTime: str
    accountingOrgId: str
    accountingTaxCode: str
    bankAccountFlag: bool
    bankAccountHolderName: str
    createTime: str
    currency: str
    description: str
    institutionName: str
    modifyTime: str
    name: str
    orgId: str
    software: str
    sortCode: str
    status: str

class AddressInfo(BaseModel):
    addressLine1: str
    addressLine2: str
    addressLine3: str
    addressLine4: str
    city: str
    country: str
    countryCode: str
    state: str

class BankStatementLineInfo(BaseModel):
    balance: 'Money'
    bookingDateTime: str
    chargeAmount: 'Money'
    counterPartyAccountNumber: str
    counterPartyName: str
    counterPartySortCode: str
    description: str
    grossAmount: 'Money'
    reference: str
    status: str
    transAmount: 'Money'
    valueDateTime: str

class BaseResponse(BaseModel):
    code: str
    message: str

class BusinessVoucherInfo(BaseModel):
    accountingSoftware: str
    attachmentIds: list[str]
    contactId: str
    createTime: str
    currency: str
    dueDate: str
    issueDate: str
    itemAmountType: str
    items: list['ItemInfo']
    modifyTime: str
    orgId: str
    reference: str
    status: str
    voucherId: str
    voucherNo: str
    voucherType: str

class ContactInfo(BaseModel):
    accountingAuthRecordId: str
    accountingContactId: str
    accountingOrgId: str
    accountingSoftware: str
    bankAccountDetails: str
    bankAccountName: str
    bankAccountNo: str
    companyNumber: str
    contactId: str
    contactPersonEmail: str
    contactPersonFirstName: str
    contactPersonLastName: str
    createTime: str
    customer: bool
    modifyTime: str
    name: str
    orgId: str
    sortCode: str
    status: str
    supplier: bool

class GenericResponse(BaseModel):
    code: str
    data: 'OrganizationInfo'
    message: str

class GenericResponse(BaseModel):
    code: str
    data: 'ReconRecordInfo'
    message: str

class GenericResponse(BaseModel):
    code: str
    data: str
    message: str

class ItemInfo(BaseModel):
    account: 'AccountInfo'
    description: str
    discountAmount: 'MoneyInfo'
    discountRate: int
    itemAmount: 'MoneyInfo'
    itemId: str
    orgId: str
    quantity: int
    taxAmount: 'MoneyInfo'
    taxRate: 'TaxRateInfo'
    unitAmount: int
    voucherId: str

class ModelAndView(BaseModel):
    empty: bool
    model: dict
    modelMap: dict
    reference: bool
    status: str
    view: 'View'
    viewName: str

class Money(BaseModel):
    amount: int
    cent: int
    centFactor: int
    currency: int
    currencyCode: str
    currencyValue: str

class MoneyInfo(BaseModel):
    amount: str
    currency: str

class OrganizationInfo(BaseModel):
    accountInfos: list['AccountInfo']
    accountingAuthRecordId: str
    contactInfos: list['ContactInfo']
    createTime: str
    id: int
    legalOrgAddress: 'AddressInfo'
    legalOrgIncorporatedDate: str
    legalOrgName: str
    legalOrgNo: str
    legalOrgType: str
    modifyTime: str
    orgAddress: 'AddressInfo'
    orgId: str
    orgLogoImageId: str
    orgName: str
    orgType: str
    orgVATNo: str
    requestId: str
    taxRateInfos: list['TaxRateInfo']

class ReconRecordInfo(BaseModel):
    createTime: str
    modifyTime: str
    orgConfirmedReconVoucherRecords: list['ReconVoucherItemInfo']
    orgConfirmedVoucherReconRecordIds: list[str]
    orgId: str
    organizationInfo: 'OrganizationInfo'
    recordId: str
    statementLineId: str
    statementLineInfo: 'BankStatementLineInfo'
    status: str
    systemReconVoucherRecords: list['ReconVoucherItemInfo']
    systemVoucherReconRecordIds: list[str]

class ReconVoucherItemInfo(BaseModel):
    businessVoucherInfo: 'BusinessVoucherInfo'
    reconAmount: 'MoneyInfo'

class TaxRateInfo(BaseModel):
    accountingAuthRecordId: str
    accountingTaxCode: str
    canApplyToAssets: bool
    canApplyToEquity: bool
    canApplyToExpenses: bool
    canApplyToLiabilities: bool
    canApplyToRevenue: bool
    createTime: str
    displayName: str
    displayTaxRate: str
    effectiveTaxRate: str
    modifyTime: str
    orgId: str
    source: str
    status: str
    taxRateId: str

class View(BaseModel):
    contentType: str